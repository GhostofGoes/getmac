name: Test

on:
- push
- pull_request

jobs:
  lint:
    name: Run Lint Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: "üêç Set up Python"
        uses: actions/setup-python@v3
        with:
          python-version: "3.8"
      - name: Install tox
        run: python -m pip install tox
      - name: Run lint checks with tox
        run: tox -e check
  test:
    name: Run tests
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        python-version:
          - "2.7"
          - "3.4"
          - "3.5"
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"
          - "pypy-2.7"
          - "pypy-3.6"
          - "pypy-3.7"
          - "pypy-3.8"
        architecture:
          - x86
          - x64
        platform:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        exclude:
          - platform: ubuntu-latest
            architecture: x86
          - platform: macos-latest
            architecture: x86
          - platform: ubuntu-latest
            python-version: "3.4"
          - platform: macos-latest
            python-version: "3.4"
    steps:
      - uses: actions/checkout@v3
      - name: "üêç Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      - name: Display platform and environment information
        # run: "python -c 'import sys, os, platform; print(sys.version); print(sys.platform); print(os.name); print(platform.system()); print(platform.version()); print(platform.uname())'"
        run: |
          python --version
          python -c 'import sys; print(sys.version)'
          python -c 'import sys; print(sys.platform)'
          python -c 'import os; print(os.name)'
          python -c 'import platform; print(platform.system())'
          python -c 'import platform; print(platform.version())'
          python -c 'import platform; print(platform.uname())'
      # TODO: do we need coveralls still?
      - name: Install dependencies
        run: python -m pip install tox coveralls tox-gh-actions
      - name: "Run tests with tox"
        run: tox
      # TODO: call coveralls
      # https://coveralls-python.readthedocs.io/en/latest/usage/configuration.html#github-actions-support
      - name: Coveralls
        uses: AndreMiras/coveralls-python-action@develop
        with:
          parallel: true
          flag-name: ${{ matrix.python-version }}-${{ matrix.platform }}
  coveralls_finish:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      uses: AndreMiras/coveralls-python-action@develop
      with:
        parallel-finished: true


# TODO: publish
# TODO: need to do this for both "getmac" and "get-mac" packages
# TODO: don't publish pre-releases OR publish them as pre-releases to PyPI

# name: "Build and publish a release"

# on:
#   release:
#     types: [released]

# jobs:
#   publish:
#     name: "üì¶ Publish Python distributions"
#     runs-on: "ubuntu-latest"
#     strategy:
#       matrix:
#         python-version:
#           - "3.8"
#     steps:
#       - uses: "actions/checkout@master"
#       - name: "üêç Set up Python ${{ matrix.python-version }}"
#         uses: "actions/setup-python@v2"
#         with:
#           python-version: "${{ matrix.python-version }}"
#       - name: "üêç Install wheel"
#         run: "python -m pip install wheel --user"
#       - name: "üêç Build a binary wheel and a source tarball"
#         run: "python setup.py sdist bdist_wheel"
#       - name: "üì¶ Publish distribution to PyPI"
#         uses: "pypa/gh-action-pypi-publish@master"
#         if: "startsWith(github.ref, 'refs/tags')"
#         with:
#           password: "${{ secrets.pypi_password }}"
