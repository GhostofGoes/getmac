name: CI

on:
- release
- push
- pull_request

jobs:
  lint:
    name: Run lint checks
    runs-on: ubuntu-20.04
    # Workaround to disable pip upgrade warnings until fixed in setup-python
    # See: https://github.com/actions/setup-python/issues/532
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1
    steps:
      - uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        # uses: snok/install-poetry@v1
        uses: Gr1N/setup-poetry@v8
      - name: Install dependencies (poetry)
        run: poetry install --only=main,lint,ci --no-interaction
      - name: Run lint checks
        run: poetry run tox -e check
  test:
    name: Run tests
    runs-on: ${{ matrix.platform }}
    # Workaround to disable pip upgrade warnings until fixed in setup-python
    # See: https://github.com/actions/setup-python/issues/532
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1
    # # Required for snok/install-poetry
    # # https://github.com/snok/install-poetry/tree/v1/#running-on-windows
    # defaults:
    #   run:
    #     shell: bash
    strategy:
      fail-fast: false
      # Versions available:
      # pypy: https://downloads.python.org/pypy/versions.json
      # Python: https://github.com/actions/python-versions/blob/main/versions-manifest.json
      # Additional info: https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md
      # OS images: https://github.com/actions/runner-images
      matrix:
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
        architecture:
          - x86
          - x64
        platform:
          - ubuntu-20.04
          - windows-latest
          - macos-latest
        exclude:
          - platform: ubuntu-20.04
            architecture: x86
          - platform: macos-latest
            architecture: x86
    steps:
      - uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      - name: Install Poetry
        # uses: snok/install-poetry@v1
        uses: Gr1N/setup-poetry@v8
      - name: Display platform and environment information
        run: |
          python --version
          python -c "import sys; print('sys.version: %s' % str(sys.version))"
          python -c "import sys; print('sys.platform: %s' % str(sys.platform))"
          python -c "import os; print('os.name: %s' % str(os.name))"
          python -c "import platform; print('platform.uname(): %s' % str(platform.uname()))"
      - name: Install dependencies (poetry)
        run: poetry install --no-interaction
      # TODO: fix benchmark results (maybe a separate Job?)
      - name: Run tests
        run: poetry run tox
      - uses: codecov/codecov-action@v3
        with:
          # codecov is annoying. Not sure why I'm still using it,
          # may need to look at something that has less heisenbugs.
          # https://community.codecov.com/t/ci-failure-due-to-too-many-uploads-to-this-commit/2587/12
          fail_ci_if_error: false
      - name: Coveralls
        if: ${{ matrix.platform == 'ubuntu-20.04' && github.event_name != 'pull_request' }}
        uses: AndreMiras/coveralls-python-action@develop
        with:
          parallel: true
          flag-name: ${{ matrix.python-version }}-${{ matrix.platform }}
  coveralls_finish:
    needs: test
    runs-on: ubuntu-20.04
    steps:
    - name: Coveralls Finished
      if: ${{ github.event_name != 'pull_request' }}
      uses: AndreMiras/coveralls-python-action@develop
      with:
        parallel-finished: true


# TODO: publish
# TODO: need to do this for both "getmac" and "get-mac" packages
# TODO: don't publish pre-releases OR publish them as pre-releases to PyPI

# https://github.com/marketplace/actions/upload-a-build-artifact

# name: "Build and publish a release"

# on:
#   release:
#     types: [released]

# jobs:
#   publish:
#     name: "üì¶ Publish Python distributions"
#     runs-on: "ubuntu-20.04"
#     strategy:
#       matrix:
#         python-version:
#           - "3.8"
#     steps:
#       - uses: actions/checkout@v3
#       - name: "üêç Set up Python ${{ matrix.python-version }}"
#         uses: actions/setup-python@v4
#         with:
#           python-version: "${{ matrix.python-version }}"
#       - name: "üêç Install wheel and build"
#         run: "python -m pip install wheel build --user"
#       - name: "üêç Build a binary wheel and a source tarball"
#         run: "python -m build"
#       - name: "üì¶ Publish distribution to PyPI"
#         uses: "pypa/gh-action-pypi-publish@master"
#         if: "startsWith(github.ref, 'refs/tags')"
#         with:
#           password: "${{ secrets.pypi_password }}"
